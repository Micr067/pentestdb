#!/usr/bin/env python
#-*- coding:utf-8 -*-

'''
Pentestdb, a database for penetration test.
Copyright (c) 2014-2015 alpha1e0
'''


import sys
import argparse
import os
import glob
import re
import importlib
import inspect

from script.libs.commons import PenError
from script.libs.commons import WordList
from script.libs.commons import Log
from script.libs.commons import Output
from script.libs.commons import URL
from script.libs.cms import CMSIdentify
from script.libs.password import PasswdGenerator
from script.libs.uribrute import URIBruter
from script.libs.coder import Code
from script.libs.coder import EncodeError
from script.libs.coder import DecodeError
from script.libs.coder import File
from script.libs.exploit import Exploit
from script.libs.exploit import ExpModel
from script.libs.exploit import ExploitError
from script.libs.exploit import NotImplementError
from script.libs.orm import ORMError
from script.libs.orm import DBError
from script.libs.searchengine import Query
from script.libs.searchengine import Baidu
from script.libs.searchengine import Bing
from script.libs.searchengine import Google
from script.libs.searchengine import SearchEngineError
from script.libs.dnsparse import DnsResolver
from script.libs.dnsparse import DnsBruter
from script.libs.subnet import subnetScan



def handleException(func):
    def _wrapper(args):
        try:
            out = Output()
            return func(args, out)
        except PenError as error:
            out.error(str(error))
        except ExploitError as error:
            out.error(str(error))
        except NotImplementError as error:
            out.error(str(error))
        except ORMError as error:
            out.error(str(error))
        except SearchEngineError as error:
            out.error(str(error))
        except DecodeError as error:
            out.error(str(error))
        #except Exception as error:
        #    out.error(u"未知错误, '{0}'".format(error))
        except KeyboardInterrupt:
            out.error(u"强制退出")
        finally:
            out.close()

    return _wrapper



def _loadExpClass(expFile):
    '''
    根据文件加载Exploit类
    '''
    expFile = os.path.join(sys.path[0], "exploit", os.path.split(expFile)[-1])
    if not os.path.exists(expFile):
        raise ExploitError("can not find exploit file '{0}'".format(expFile))

    fileName = os.path.split(expFile)[-1]
    fileName = fileName.endswith(".pyc") and fileName[:-4] or fileName.endswith(".py") and fileName[:-3] or fileName
    expModuleName = ".".join(['exploit', fileName])

    module = importlib.import_module(expModuleName)

    for member in dir(module):
        expClass = getattr(module, member)
        if inspect.isclass(expClass):
            if issubclass(expClass, Exploit) and expClass.__name__ != 'Exploit':
                break
    else:
        raise ExploitError(u"can not find exploit defination in file '{0}'".format(expFile))

    return expClass


def _execExploit(expFile, url, args):
    '''
    执行exploit
    Input:
        expFile: exploit的文件名
        args: 命令行参数
    '''

    expClass = _loadExpClass(expFile)

    cookie = ""
    headers = dict()
    if args.cookie:
        cookie = args.cookie
    if args.referer:
        headers['Referer'] = args.referer
    if args.useragent:
        headers['User-Agent'] = args.useragent
    if args.header:
        for param in args.header.split("#"):
            paramSplited = param.strip().split("=")
            headers[paramSplited[0]] = paramSplited[1]

    elseArgs = dict()
    if args.elseargs:
        for param in args.elseargs.split("#"):
            paramSplited = param.strip().split("=")
            elseArgs[paramSplited[0]] = paramSplited[1]

    url = url.strip()
    if not url.startswith("http"):
        url = "http://" + url

    exploit = expClass(url, cookie, headers, elseArgs)
    if args.verify:
        result = exploit.execute("verify")
    elif args.attack:
        result = exploit.execute("attack")
    else:
        result = exploit.execute("verify")

    return result


def _parseExpSearchParam(param):
    '''
    搜索参数column:keyword处理
    '''
    columns = ['expName', 'os', 'webserver', 'language', 'appName']
    
    if ":" not in param:
        column = 'expName'
        keyword = param.strip().decode(sys.stdout.encoding)
    else:
        splited = param.split(":")
        column = splited[0].strip()
        keyword = splited[1].strip().decode(sys.stdout.encoding)

    if column not in columns:
        raise ExploitError("search param error, should be one of '{0}'".format(columns))

    return (column, keyword)


@handleException
def doExploit(args, out):
    '''
    exploit模块
    '''
    out.init(u"Exploit验证系统", tofile=args.output)
    # 创建exploit信息数据库
    if args.createdb:
        try:
            ExpModel.create()
        except DBError as error:
            out.error(u"创建数据库失败，'{0}'".format(error))
        else:
            out.info(u"创建数据库成功")
        return True

    # 注册register
    if args.register:
        path = os.path.split(args.register.rstrip("\\/"))[-1]
        if ".py" in path:
            path = os.path.join(sys.path[0],"exploit",path)
        else:
            path = os.path.join(sys.path[0],path)

        if not os.path.exists(path):
            out.error(u"路径'{0}'不存在".format(path))
            return False

        if os.path.isfile(path):
            try:
                expClass = _loadExpClass(path)
            except ExploitError as error:
                out.error(u"加载'{0}'失败，'{1}'".format(path,str(error)))
                return False

            exploit = expClass()
            exploit.register()
            out.info(u"'{0}'文件中的exploit注册成功".format(path))
            return True
        else:
            files = glob.glob(os.path.join(path,"*.py"))
            for f in files:
                try:
                    expClass = _loadExpClass(f)
                    exploit = expClass()
                    exploit.register()
                except ExploitError as error:
                    continue
                else:
                    out.info(u"'{0}'文件中的exploit注册成功".format(f))
            return True

    # 更新exploit
    if args.update:
        try:
            expClass = _loadExpClass(args.update)
        except ExploitError as error:
            out.error(u"加载exploit失败，reason: {0}".format(error))
            return False
        else:
            exploit = expClass()
            exploit.update()
            out.info(u"Exploit信息更新成功")
            return True

    # 删除exploit信息条目
    if args.delete:
        expName = args.delete.strip().decode(sys.stdout.encoding).encode("utf8")
        try:
            ExpModel.delete(expName)
        except DBError as error:
            out.error(u"删除exploit信息条目失败，'{0}'".format(error))
        else:
            out.info(u"删除exploit信息条目成功")
        return True

    # 列举所有exploit
    if args.list:
        exploits = ExpModel.gets('expName','expFile')
        out.warnning(u"项目中共有以下{0}个Exploit:\n".format(len(exploits)))
        for exp in exploits:
            out.info(out.Y(u"名称 : ") + exp.expName)
            out.info(out.Y(u"文件 : ") + exp.expFile + "\n")
        return True

    # 搜索exploit
    if args.query:
        column, keyword = _parseExpSearchParam(args.query)
        if not column: return False

        exploits = ExpModel.search(column, keyword)
        if exploits:
            out.green(u"关键词 '{0}' 在 '{1}' 列中搜索结果:\n".format(keyword,column))
            for exp in exploits:
                out.info(out.Y("expName: ") + exp.expName)
                out.info(out.Y("expFile: ") + exp.expFile + "\n")
        else:
            out.red(u"在 '{0}' 列中未搜索到包含关键词 '{1}' 的exploit".format(column,keyword))
        return True
    
    # 显示某个exploit的详细信息
    if args.detail:
        expName = args.detail.strip().decode(sys.stdout.encoding).encode("utf8")
        exp = ExpModel.get(expName)
        out.info(str(exp))
        
    # Exploit执行
    if args.execute:
        if ".py" in args.execute:
            if not args.url:
                out.error(u"缺少 -u/--url 参数")
                return False

            if args.url.startswith("@"):
                try:
                    urls = open(args.url[1:],"r").readlines()
                except IOError as error:
                    out.error(u"url文件打开失败，'{0}'".format(str(error)))
                    return False
            else:
                urls = [args.url]

            for url in urls:
                result = _execExploit(args.execute, url, args)
                out.info(result)

            return True
        else:
            if not args.url:
                out.error(u"缺少 -u/--url 参数")
                return False

            if args.url.startswith("@"):
                try:
                    urls = open(args.url[1:],"r").readlines()
                except IOError as error:
                    out.error(u"url文件打开失败，原因:'{0}'".format(str(error)))
                    return False
            else:
                urls = [args.url]

            column, keyword = _parseExpSearchParam(args.execute)
            if not column: return False

            exploits = ExpModel.search(column, keyword)
            if exploits:
                for exp in exploits:
                    for url in urls:
                        result = _execExploit(exp.expFile, url, args)
                        out.info(result)
            else:
                out.red(u"在 '{0}' 列中未搜索到包含关键词 '{1}' 的exploit".format(column,keyword))
                return False

            return True
    


@handleException
def doCMSIdentify(args, out):
    '''
    CMS类型识别
    '''
    out.init(u"CMS识别")
    if args.notfound:
        cms = CMSIdentify(args.url, notFoundPattern=args.notfound)
    else:
        cms = CMSIdentify(args.url)
    result = cms.identify()

    if result[1]:
        out.warnning(u"\n识别成功:")
        out.info("{0} ==> ".format(args.url) + out.R(result[0]))
    else:
        out.warnning(u"识别失败")



@handleException
def doGenPassword(args, out):
    '''
    密码生成
    '''
    out.init(u"社工密码生成", args.output)

    pwgen = PasswdGenerator(fullname=args.fullname, nickname=args.nickname, englishname=args.englishname, \
        partnername=args.partnername, birthday=args.birthday, phone=args.phone, qq=args.qq, company=args.company, \
        domain=args.domain, oldpasswd=args.oldpasswd, keywords=args.keywords, keynumbers=args.keynumbers)
    wordlist = pwgen.generate()

    out.warnning(u"生成社工密码字典如下：")
    for line in wordlist:
        out.info(line)
        out.writeLine(line)



@handleException
def doURIBrute(args, out):
    '''
    URI爆破/URI爆破字典生成
    '''
    out.init("URI资源爆破工具", args.output)

    if args.types:
        types = args.types.split(",")
        for t in types:
            if t not in URIBruter.allowTypes:
                out.error(u"不支持 '{0}' 爆破类型，请选择 {1}".format(t,",".join(URIBruter.allowTypes)))
                return False
    else:
        types = URIBruter.allowTypes

    keywords = args.keywords.split(",") if args.keywords else []
    exts = args.exts.split(",") if args.exts else []
    timeout = args.timeout if args.timeout else 10
    delay = args.delay if args.delay else 0
    size = args.size if args.size else "small"
    size = size if size in ['small','large'] else "small"

    if args.brute:
        if not args.url:
            out.error("缺少 -u/--url 参数")
            sys.exit(1)
        if args.url.startswith("@"):
            fileName = args.url[1:]
            try:
                urls = open(fileName,"r").readlines()
            except IOError as error:
                out.error(u"URL文件 '{0}' 打开失败".format(fileName))
                return False
        else:
            if not args.url.startswith("http"):
                url = "http://" + args.url.strip()
            else:
                url = args.url.strip()
            urls = [url]

        bruter = URIBruter(types=types, keywords=keywords, exts=exts, size=size)

        matchs = []
        for url in urls:
            matchs = matchs + bruter.bruteforce(url.strip(), args.notfound, args.safeurl, timeout, delay)

        if not matchs:
            out.warnning(u"未爆破到有效资源")
        else:
            out.warnning(u"爆破结果:")
            for line in matchs:
                out.info(line)
    else:
        url = args.url if args.url else None
        bruter = URIBruter(types=types, keywords=keywords, exts=exts, size=size)
        result = bruter.genDict(url)

        out.warnning(u"生成URI爆破字典如下:")
        for line in result:
            out.info(line)
            out.writeLine(line)



@handleException
def doEncode(args, out):
    '''
    字符串编码
    '''
    out.init(u"编码工具")

    code = Code(args.code)

    out.warnning(u"原始Payload：")
    out.info(args.code)
    out.warnning(u"编码结果：")
    try:
        for line in code.encode(args.type, args.method):
            out.info(line.strip())
    except EncodeError as error:
        out.error(str(error))



@handleException
def doDecode(args, out):
    '''
    字符串解码
    '''
    out.init(u"解码工具")

    code = Code(args.code)
    out.warnning(u"原始Payload：")
    out.info(args.code)
    
    try:
        if args.detect:
            out.warnning(u"编码推测结果：")
            result = code.detect()
            out.info(u"编码：" + str(result['encoding']))
            out.info(u"置信度：" + str(result['confidence']*100)[:5] + "%")
            return True

        out.warnning(u"解码结果：")
        for line in code.decode(args.type, args.method):
            out.info(line.strip())
    except EncodeError as error:
        out.error(str(error))



@handleException
def doFileOp(args, out):
    '''
    文件处理
    '''
    out.init(u"文件转换工具")

    _file = File(args.file, args.method)

    if args.detect:
        size = args.size if args.size else 2048
        result = _file.detect(size)
        out.info(out.Y(u"编码：") + str(result['encoding']))
        out.info(out.Y(u"置信度：") + str(result['confidence']*100)[:5] + "%")
        return True
    if args.convert:
        if not args.dtype:
            out.error(u"\n缺少 --dtype 参数")
            return False
        if not args.dfile:
            out.error(u"\n缺少 -d/--dfile 参数")
            return False
        _file.convert(args.dfile, args.dtype)
        return True
    if args.hash:
        if args.hash not in File.hashMethod:
            out.error(u"hash类型'{0}'不支持，支持{1}".format(args.hash, "/".join(File.hashMethod)))
            return False
        else:
            result = _file.hash(args.hash)
            out.info(out.Y(u"hash类型: ") + args.hash)
            out.info(out.Y(u"结果: ") + result)
            return True
    if args.hfile:
        if not args.dfile:
            out.error(u"\n缺少 -d/--dfile 参数")
            return False
        _file.hide(args.hfile, args.dfile)
        return True
    if args.list:
        out.warnning(u"文件编码转换支持的类型")
        out.info("\n".join(_file.convertType))
        return True



@handleException
def doGoogleHacking(args, out):
    '''
    Google Hacking功能
    '''
    out.init(u"Google Hacking功能", args.output)

    keywords = args.keywords.decode(sys.stdin.encoding)
    engineName = args.engine.lower().strip() if args.engine else "baidu"
    size = args.size if args.size else 20

    if engineName == "baidu":
        engine = Baidu()
    elif engineName == "bing":
        engine = Bing()
    elif engineName == "google":
        engine = Google()
    else:
        out.error(u"不支持 '{0}' 搜索引擎，必须为 baidu/bing/google 之一".format(engineName))
        return False

    hostSet = set()
    out.warnning(u"'{0}' 在 '{1}' 中的搜索结果如下:\n".format(keywords, engineName))
    for item in engine.search(keywords,size):
        if not args.unique:
            out.info(out.Y("{0:>6} : ".format("title")) + item.title)
            out.info(out.Y("{0:>6} : ".format("url")) + item.url + "\n")
            out.writeLine(item.url)
        else:
            host = URL.getHost(item.url)
            if host:
                if host not in hostSet:
                    hostSet.add(host)
                    out.info(out.Y("{0:>6} : ".format("title")) + item.title)
                    out.info(out.Y("{0:>6} : ".format("url")) + item.url + "\n")
                    out.writeLine(item.url)
                else:
                    continue


def _htmlLink(target):
    return "<a href='{0}' target='_blank'>{0}</a><br/>".format("http://"+target)


@handleException
def doSubDomainScan(args, out):
    out.init("子域名爆破", tofile=args.output)
    log = Log("subdomain")
    if args.output:
        outHtml = True if args.output.endswith("html") else False
    else:
        outHtml = False

    techniques = []
    if not args.technique:
        techniques = ['z','d','g']
    else:
        if len(args.technique) <= 3:
            for t in args.technique:
                if t in "zdg":
                    techniques.append(t)
                else:
                    techniques = []
        if not techniques:
            out.error(u"不支持--techniques {0}".format(args.technique))
            return False

    dictfile = args.dict if args.dict else None
    topdomainBrute = True if args.topdomain else False
    size = args.size if args.size else 200
    if args.engine:
        if args.engine in Query.allowEngines:
            engine = args.engine
        else:
            out.error(u"不支持 --engine {0}，支持{1}".format(args.engine, str(Query.allowEngines)))
            return False
    else:
        engine = 'baidu'
    domain = URL.getHost(args.domain)

    result = set()

    dnsresolver = DnsResolver(domain)
    records = dnsresolver.getZoneRecords()
    if "z" in techniques:
        log.debug(">>>>>checking if dns zonetrans vulnerable")
        for record in records:
            log.debug("dns zonetrans vulnerable, got '{0}'".format(str(record)))
            result.add(record[0])

    if "d" in techniques:
        log.debug(">>>>>dns brutefroce")
        for item in DnsBruter(domain, dictfile, topdomainBrute):
            log.debug("dns bruteforce, got '{0}'".format(str(item)))
            result.add(item.domain)

    if "g" in techniques:
        log.debug(">>>>>google hacking")
        query = Query(site=domain) | -Query(site="www."+domain)
        for item in query.doSearch(engine=engine, size=size):
            log.debug("google hacking, got '{0}'".format(item.url))
            host = URL.getHost(item.url)
            result.add(host)

    out.warnning(u"子域名爆破结果:")
    for d in result:
        out.info(d)
        if not outHtml:
            out.writeLine(d)
        else:
            out.writeLine(d, _htmlLink)

    return True


@handleException
def doSubNetScan(args, out):
    out.init(u"C段扫描", tofile=args.output)
    outHtml = True if args.output.endswith("html") else False

    result = subnetScan(args.host, args.hostonly)
    if result:
        out.warnning(u"扫描结果如下:")
        for host in result:
            hostStr = ":".join([host.ip,host.port])
            out.info(hostStr)
            if not outHtml:
                out.writeLine(hostStr)
            else:
                out.writeLine(hostStr, _htmlLink)


